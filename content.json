{"meta":{"title":"Lei_Yang","subtitle":"玲珑骰子安红豆","description":"喜欢就点点我","author":"Lei_Yang","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"uniApp_npm搭建","slug":"uniApp_npm搭建","date":"2020-06-25T07:06:37.691Z","updated":"2019-11-30T12:11:40.358Z","comments":true,"path":"2020/06/25/uniApp_npm搭建/","link":"","permalink":"http://yoursite.com/2020/06/25/uniApp_npm%E6%90%AD%E5%BB%BA/","excerpt":"","text":"1、全局安装vue，vue-cli​ npm install -g @vue/cli 2、创建uni-appvue create -p dcloudio/uni-preset-vue my-project 3、运行并发布uniappnpm run dev:%PLATFORM% npm run build:%PLATFORM% 4、uni-app支持使用npm安装第三方包npm install packageName –save 使用 安装完即可使用npm包，js中引入npm包： import package from 'packageName'const package = require('packageName')","categories":[],"tags":[]},{"title":"React-Native安装配置","slug":"React-Native安装配置","date":"2020-06-25T07:06:32.441Z","updated":"2019-12-02T00:44:56.356Z","comments":true,"path":"2020/06/25/React-Native安装配置/","link":"","permalink":"http://yoursite.com/2020/06/25/React-Native%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"","text":"React-Native安装本地地址: Android studiosdk默认安装地址:C:\\Users\\17637\\AppData\\Local\\Android\\Sdk 1.初始化一个React Native应用，我们可以通过React Native命令行工具来完成，打开命令提示符窗口并运行下面命令： 2.react-native init 项目名称 –version 0.60.5 进入项目文件查看:react-native -v 3.打开项目后在build gradle中把3.4.1改成3.3.1 4.在gradle-&gt;wrapper-&gt;gradle-wrapper.properties文件中修改 distributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip 在项目文件下启动: react-native run-android","categories":[],"tags":[]},{"title":"函数","slug":"函数","date":"2020-06-25T07:06:30.621Z","updated":"2019-12-09T02:55:00.603Z","comments":true,"path":"2020/06/25/函数/","link":"","permalink":"http://yoursite.com/2020/06/25/%E5%87%BD%E6%95%B0/","excerpt":"","text":"回调函数:setIeterval(function(){},1000)一个函数的返回值作为另一个函数的参数 递归函数:自己调用自己 fun(){fun(){}} 匿名函数:没有名字的函数 闭包函数:打破作用域壁垒 开发模式: 传统模式\\框架(前后端分离) 企业站,宣传一般都是传统模式,利于爬虫seo 框架–后台系统管理模式","categories":[],"tags":[]},{"title":"git_github配置","slug":"git_github配置","date":"2020-06-25T07:06:27.539Z","updated":"2019-11-23T14:46:38.963Z","comments":true,"path":"2020/06/25/git_github配置/","link":"","permalink":"http://yoursite.com/2020/06/25/git_github%E9%85%8D%E7%BD%AE/","excerpt":"","text":"git上传项目到github1.在gihub 上创建一个仓库。 2.填写项目名字和描述 完成后, 复制仓库地址https://github.com/Yangxiaolei190/thisme.git，如下图： 打开已经下载好的git，找到需要打包的文件夹目录，点击反键运行git bash here,如果不想这样做的，自己打开 我们需要先创建一个本地的版本库（其实也就是一个文件夹）。 这里可以使用另外一种方式，更加简单： cmd打开小黑屋，输入 git clone https:&#x2F;&#x2F;github.com&#x2F;Yangxiaolei190&#x2F;cart.git . 暂存 提交 拉取 推送 你可以直接右击新建文件夹，也可以右击打开Git bash命令行窗口通过命令来创建。 我通过小黑屋 git init 初始化仓库,在文件夹那里 把隐藏的文件夹勾选出来，可以看见.git文件夹 6.这时候就可以把项目粘贴到这个本地Git仓库里面（粘贴后可以通过git status来查看你当前的状态），然后通过git add把项目添加到仓库（或git add .把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git status来查看你当前的状态。 这里提示你虽然把项目粘贴过来了，但还没有add到Git仓库上，然后我们通过git add .把刚才复制过来的项目全部添加到仓库上。 用git commit把项目提交到仓库。 -m后面引号里面是本次提交的注释内容，这个可以不写，但最好写上，不然会报错，详情自行Google。 好了，我们本地Git仓库这边的工作做完了，下面就到了连接远程仓库（也就是连接Github） 由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下： 由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下： 创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建 $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件 9.登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。具体步骤也可看下面： )![image-201 在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地git仓库的命令行输入： $ git remote add origin https://github.com/Yangxiaolei190/thisme.git 11.联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过： $ git push -u origin master 由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了： $ git push origin master 上传项目的过程可能需要等一段时间，完成之后是这样的: 刷新Github页面进入刚才新建的那个仓库里面就会发现项目已经成功上传了： 至此就完成了将本地项目上传到Github的整个过程。 特别注意: 1.这里有个坑需要注意一下，就是在上面第2步创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件） 将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to https://github.com/Yangxiaolei190/thisme.git的错 这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下： git pull –rebase origin master 2.加入.gitignore文件夹,本地项目合并到一个大项目,文件不同只合并代码,过滤作用 git add . .表示暂存当前路径下的所有文件,把刚才变更的放到暂存区还不能与远程操作 第二步从暂存区提交到本地仓库 git commit -m \"新建项目\" 1.git pull拉取 2.推送Git push 组员从服务器交互1.本地新建一个文件夹 2.使用git命令clone服务器上的代码 git clone https:&#x2F;&#x2F;github.com&#x2F;Yangxiaolei190&#x2F;thisme.git . 第一步:暂存 git add . 第二步:提交 git commit -m “提交的注释” $ git config user.name \"liguangxian\"$ git config user.email \"2995183552@qq.com\" 第三步:拉取 git pull 第四步:推送 git push","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-06-25T06:23:50.244Z","updated":"2020-06-25T06:23:50.244Z","comments":true,"path":"2020/06/25/hello-world/","link":"","permalink":"http://yoursite.com/2020/06/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}